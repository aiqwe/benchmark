[
    {
        "idx": 53,
        "inputs": "Python code:\nimport re\n\ndef test_regular_expression(test_str):\n    if re.match(r'^\\d{4}-\\d{3}$', test_str):\n        return True\n    else:\n        return False\n\n  choice: returns true if a number is of type yyyy-yyy else false\n  choice: returns value in 'test_str'\n  choice: returns string 'r'^\\d{4}-\\d{3}$''\n  choice: returns true if a string has character 'd' on it\n\nEnglish language description:",
        "targets": [
            "returns true if a number is of type yyyy-yyy else false"
        ],
        "multiple_choice_targets": [
            "returns true if a string has character 'd' on it",
            "returns true if a number is of type yyyy-yyy else false",
            "returns string 'r'^\\d{4}-\\d{3}$''",
            "returns value in 'test_str'"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 40,
        "inputs": "Python code:\ndef recur_fibo(n):\n    if n <= 1:\n        return n\n    else:\n        return(recur_fibo(n-1) + recur_fibo(n-2))\n\nnterms = 10\n\nfor i in range(nterms):\n    print(recur_fibo(i))\n\n  choice: prints first ten fibonacci numbers\n  choice: returns recursion\n  choice: prints first 100 prime numbers\n  choice: prints number less than 10\n\nEnglish language description:",
        "targets": [
            "prints first ten fibonacci numbers"
        ],
        "multiple_choice_targets": [
            "prints first ten fibonacci numbers",
            "returns recursion",
            "prints number less than 10",
            "prints first 100 prime numbers"
        ],
        "multiple_choice_scores": [
            1,
            0,
            0,
            0
        ]
    },
    {
        "idx": 39,
        "inputs": "Python code:\nno_terms = 5\nn1, n2 = 0, 1\ncount = 0\nwhile count < no_terms:\n    print(n1)\n    nth = n1 + n2\n    n1 = n2\n    n2 = nth\n    count += 1\n\n  choice: prints first 5 prime numbers\n  choice: prints sum of two numbers\n  choice: prints first 5 fibonacci numbers\n  choice: prints sum of first five numbers\n\nEnglish language description:",
        "targets": [
            "prints first 5 fibonacci numbers"
        ],
        "multiple_choice_targets": [
            "prints sum of first five numbers",
            "prints first 5 fibonacci numbers",
            "prints first 5 prime numbers",
            "prints sum of two numbers"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 56,
        "inputs": "Python code:\nfruits = ['Apple','Orange','Guava','Banana']\nfruits.insert(1, 'Grape')\n\n  choice: inserts 1 in list fruits\n  choice: returns a list of fruits\n  choice: creates a list of apples\n  choice: inserts Grape in list fruits in second position\n\nEnglish language description:",
        "targets": [
            "inserts Grape in list fruits in second position"
        ],
        "multiple_choice_targets": [
            "inserts 1 in list fruits",
            "inserts Grape in list fruits in second position",
            "creates a list of apples",
            "returns a list of fruits"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 55,
        "inputs": "Python code:\nclass Bank(object):\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        self.balance -= amount\nmy_account = Bank(15)\n\n  choice: creates a class Car and initializes\n  choice: declares a variable\n  choice: class of objects\n  choice: creates an object my_account of class Bank\n\nEnglish language description:",
        "targets": [
            "creates an object my_account of class Bank"
        ],
        "multiple_choice_targets": [
            "creates a class Car and initializes",
            "class of objects",
            "creates an object my_account of class Bank",
            "declares a variable"
        ],
        "multiple_choice_scores": [
            0,
            0,
            1,
            0
        ]
    },
    {
        "idx": 23,
        "inputs": "Python code:\nj,b = False,True\nif j and b:\n    print('pass')\nelse:\n    print('fail')\n\n  choice: prints fail since j is false\n  choice: since both and b are true prints pass\n  choice: combines a and b\n  choice: prints value of both a and b\n\nEnglish language description:",
        "targets": [
            "prints fail since j is false"
        ],
        "multiple_choice_targets": [
            "since both and b are true prints pass",
            "prints fail since j is false",
            "combines a and b",
            "prints value of both a and b"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 36,
        "inputs": "Python code:\nnum = 20\nfactorial = 1\n\nif num < 0:\n    print('Sorry, factorial does not exist for negative numbers')\nelif num == 0:\n    print('The factorial of 0 is 1')\nelse:\n    for i in range(1,num + 1):\n        factorial = factorial*i\n    print('The factorial of',num,'is',factorial)\n\n  choice: checks if a number is positive or negative\n  choice: prints the factorial of number 20\n  choice: checks if 20 is negative number\n  choice: prints 'The factorial of 20 is 0'\n\nEnglish language description:",
        "targets": [
            "prints the factorial of number 20"
        ],
        "multiple_choice_targets": [
            "prints 'The factorial of 20 is 0'",
            "prints the factorial of number 20",
            "checks if a number is positive or negative",
            "checks if 20 is negative number"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 12,
        "inputs": "Python code:\nnumbers_list = [2, 6, 8, 10, 11, 4, 12, 7, 13, 17, 0, 3, 21]\nremainder_list = list(map(lambda num: num % 2, numbers_list))\nprint(remainder_list)\n\n  choice: prints factors of 2\n  choice: returns multiples of 3\n  choice: prints a list of remainders of numbers in list numbers_list when divided by 2\n  choice: returns a list of odd numbers\n\nEnglish language description:",
        "targets": [
            "prints a list of remainders of numbers in list numbers_list when divided by 2"
        ],
        "multiple_choice_targets": [
            "returns a list of odd numbers",
            "prints a list of remainders of numbers in list numbers_list when divided by 2",
            "returns multiples of 3",
            "prints factors of 2"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 45,
        "inputs": "Python code:\ndef natural_sum_recursive(n):\n    if n <= 1:\n        return n\n    else:\n        return n + natural_sum_recursive(n-1)\n\nnum = 16\nprint(natural_sum_recursive(num))\n\n  choice: prints the first 16 natural numbers\n  choice: returns natural_sum_recursive\n  choice: prints string natural\n  choice: prints the sum of first 16 natural numbers\n\nEnglish language description:",
        "targets": [
            "prints the sum of first 16 natural numbers"
        ],
        "multiple_choice_targets": [
            "returns natural_sum_recursive",
            "prints string natural",
            "prints the sum of first 16 natural numbers",
            "prints the first 16 natural numbers"
        ],
        "multiple_choice_scores": [
            0,
            0,
            1,
            0
        ]
    },
    {
        "idx": 4,
        "inputs": "Python code:\na = {'x':20,'y':30,'z':40,'s':50}\nmore_than = [(k, v) for k, v in a.items() if v >= 30]\nprint(more_than)\n\n  choice: prints a dictionary of values\n  choice: prints v\n  choice: initailizes a list with values greater than 30\n  choice: prints list of key,value tuples from dictionary a with values greater or equals to 30\n\nEnglish language description:",
        "targets": [
            "prints list of key,value tuples from dictionary a with values greater or equals to 30"
        ],
        "multiple_choice_targets": [
            "prints list of key,value tuples from dictionary a with values greater or equals to 30",
            "prints a dictionary of values",
            "prints v",
            "initailizes a list with values greater than 30"
        ],
        "multiple_choice_scores": [
            1,
            0,
            0,
            0
        ]
    },
    {
        "idx": 2,
        "inputs": "Python code:\nprint([x for x in range(1,531)])\n\n  choice: prints 'hello world' to the terminal\n  choice: prints values from 1 to 10\n  choice: computes first 10 prime numbers\n  choice: prints a list of first 530 natural numbers\n\nEnglish language description:",
        "targets": [
            "prints a list of first 530 natural numbers"
        ],
        "multiple_choice_targets": [
            "prints a list of first 530 natural numbers",
            "computes first 10 prime numbers",
            "prints values from 1 to 10",
            "prints 'hello world' to the terminal"
        ],
        "multiple_choice_scores": [
            1,
            0,
            0,
            0
        ]
    },
    {
        "idx": 42,
        "inputs": "Python code:\nnatural_sum = 0\ni = 100\nwhile(i > 0):\n    natural_sum += i\n    i -= 1\nprint('The sum is', natural_sum)\n\n  choice: prints the factorial of numbers\n  choice: prints the sum of first 100 natural numbers\n  choice: prints number from 10 to 0 in ascending order\n  choice: prints the numbers from 1 to 10\n\nEnglish language description:",
        "targets": [
            "prints the sum of first 100 natural numbers"
        ],
        "multiple_choice_targets": [
            "prints the sum of first 100 natural numbers",
            "prints the numbers from 1 to 10",
            "prints number from 10 to 0 in ascending order",
            "prints the factorial of numbers"
        ],
        "multiple_choice_scores": [
            1,
            0,
            0,
            0
        ]
    },
    {
        "idx": 14,
        "inputs": "Python code:\ndef sum_two(a,b):\n    return a+b\n\n  choice: returns a and b\n  choice: returns the sum of two numbers\n  choice: returns 5 and 6\n  choice: returns numbers between 5 and 6\n\nEnglish language description:",
        "targets": [
            "returns the sum of two numbers"
        ],
        "multiple_choice_targets": [
            "returns the sum of two numbers",
            "returns a and b",
            "returns 5 and 6",
            "returns numbers between 5 and 6"
        ],
        "multiple_choice_scores": [
            1,
            0,
            0,
            0
        ]
    },
    {
        "idx": 49,
        "inputs": "Python code:\ndef number_vowels(test_str):\n\n    # string of vowels\n    vowels = 'aeiou'\n    test_str = ip_str.casefold()\n    count = {}.fromkeys(vowels,0)\n\n    # count the vowels\n    for char in test_str:\n        if char in count:\n            count[char] += 1\n    return count\n\n  choice: returns a dictionary of the number of occurences of each vowel in a string\n  choice: returns the sum of all the numbers\n  choice: counts the number of characters in a string\n  choice: returns complex numbers\n\nEnglish language description:",
        "targets": [
            "returns a dictionary of the number of occurences of each vowel in a string"
        ],
        "multiple_choice_targets": [
            "counts the number of characters in a string",
            "returns a dictionary of the number of occurences of each vowel in a string",
            "returns complex numbers",
            "returns the sum of all the numbers"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 18,
        "inputs": "Python code:\na = 'xyz'\nb = 'xyz'\nc = a is b\nprint(c)\n\n  choice: prints string 'b'\n  choice: swaps strings and b\n  choice: checks if a is identical to b and prints True\n  choice: swaps a with c\n\nEnglish language description:",
        "targets": [
            "checks if a is identical to b and prints True"
        ],
        "multiple_choice_targets": [
            "prints string 'b'",
            "checks if a is identical to b and prints True",
            "swaps strings and b",
            "swaps a with c"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 5,
        "inputs": "Python code:\ntext = [line.strip() for line in open('File')]\n\n  choice: prints values from 0 to 100\n  choice: strips the for line\n  choice: initializes a list with values in line\n  choice: reads a file, strips leading and trailing white space characters and stores result in list\n\nEnglish language description:",
        "targets": [
            "reads a file, strips leading and trailing white space characters and stores result in list"
        ],
        "multiple_choice_targets": [
            "initializes a list with values in line",
            "reads a file, strips leading and trailing white space characters and stores result in list",
            "strips the for line",
            "prints values from 0 to 100"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 54,
        "inputs": "Python code:\ntry:\n    n = int(input())\n    m = int(input())\n    integer_sum = int(n) + int(m)\n    print(integer_sum)\nexcept:\n    print('error')\n\n  choice: prints number between 5 and 6\n  choice: try input and except error\n  choice: inputs the string 'try'\n  choice: prints sum of two input numbers only if they are integers otherwise raises error\n\nEnglish language description:",
        "targets": [
            "prints sum of two input numbers only if they are integers otherwise raises error"
        ],
        "multiple_choice_targets": [
            "prints number between 5 and 6",
            "prints sum of two input numbers only if they are integers otherwise raises error",
            "try input and except error",
            "inputs the string 'try'"
        ],
        "multiple_choice_scores": [
            0,
            1,
            0,
            0
        ]
    },
    {
        "idx": 14,
        "inputs": "Python code:\ndef sum_two(a,b):\n    return a+b\n\n  choice: returns a and b\n  choice: returns the sum of two numbers\n  choice: returns 5 and 6\n  choice: returns numbers between 5 and 6\n\nEnglish language description:",
        "targets": [
            "returns the sum of two numbers"
        ],
        "multiple_choice_targets": [
            "returns the sum of two numbers",
            "returns a and b",
            "returns 5 and 6",
            "returns numbers between 5 and 6"
        ],
        "multiple_choice_scores": [
            1,
            0,
            0,
            0
        ]
    },
    {
        "idx": 55,
        "inputs": "Python code:\nclass Bank(object):\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        self.balance -= amount\nmy_account = Bank(15)\n\n  choice: creates a class Car and initializes\n  choice: declares a variable\n  choice: class of objects\n  choice: creates an object my_account of class Bank\n\nEnglish language description:",
        "targets": [
            "creates an object my_account of class Bank"
        ],
        "multiple_choice_targets": [
            "creates a class Car and initializes",
            "class of objects",
            "creates an object my_account of class Bank",
            "declares a variable"
        ],
        "multiple_choice_scores": [
            0,
            0,
            1,
            0
        ]
    },
    {
        "idx": 6,
        "inputs": "Python code:\ns = 'Learn Build Teach'\nprint(s[0:5])\n\n  choice: prints 5 words from string s\n  choice: prints values from 0 to 5\n  choice: prints 'Learn'\n  choice: prints the list of strings\n\nEnglish language description:",
        "targets": [
            "prints 'Learn'"
        ],
        "multiple_choice_targets": [
            "prints values from 0 to 5",
            "prints 5 words from string s",
            "prints the list of strings",
            "prints 'Learn'"
        ],
        "multiple_choice_scores": [
            0,
            0,
            0,
            1
        ]
    }
]