[
    {
        "task_id": 784,
        "text": "Write a function to find number of even elements in the given list using lambda function.",
        "code": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ",
        "test_list": [
            "assert is_abundant(12)==True",
            "assert is_abundant(13)==False",
            "assert is_abundant(9)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 799,
        "text": "Write a function to add a dictionary to the tuple.",
        "code": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ",
        "test_list": [
            "assert Sum_of_Inverse_Divisors(6,12) == 2",
            "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
            "assert Sum_of_Inverse_Divisors(1,4) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 970,
        "text": "Write a function to calculate the standard deviation.",
        "code": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ",
        "test_list": [
            "assert check_Even_Parity(10) == True",
            "assert check_Even_Parity(11) == False",
            "assert check_Even_Parity(18) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 956,
        "text": "Write a function to split a string at uppercase letters.",
        "code": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False",
        "test_list": [
            "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
            "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
            "assert extract_elements([0,0,0,0,0],5)==[0]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 845,
        "text": "Write a function to check if the given tuples contain the k or not.",
        "code": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ",
        "test_list": [
            "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
            "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
            "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 797,
        "text": "Write a python function to replace multiple occurence of character by single.",
        "code": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ",
        "test_list": [
            "assert find_Digits(7) == 4",
            "assert find_Digits(5) == 3",
            "assert find_Digits(4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 779,
        "text": "Write a function to find the product of it’s kth index in the given tuples.",
        "code": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)",
        "test_list": [
            "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
            "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
            "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 617,
        "text": "Write a python function to count the total set bits from 1 to n.",
        "code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()",
        "test_list": [
            "assert area_tetrahedron(3)==15.588457268119894",
            "assert area_tetrahedron(20)==692.8203230275509",
            "assert area_tetrahedron(10)==173.20508075688772"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 881,
        "text": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
        "code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2",
        "test_list": [
            "assert triangle_area(0) == 0",
            "assert triangle_area(-1) == -1",
            "assert triangle_area(2) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 773,
        "text": "Write a function to sort a list in a dictionary.",
        "code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ",
        "test_list": [
            "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
            "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
            "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 754,
        "text": "Write a function to find the product of it’s kth index in the given tuples.",
        "code": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ",
        "test_list": [
            "assert find_Index(2) == 4",
            "assert find_Index(3) == 14",
            "assert find_Index(4) == 45"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 970,
        "text": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
        "code": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
        "test_list": [
            "assert check_Concat(\"abcabcabc\",\"abc\") == True",
            "assert check_Concat(\"abcab\",\"abc\") == False",
            "assert check_Concat(\"aba\",\"ab\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 667,
        "text": "Write a function to sort a list of lists by length and value.",
        "code": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",
        "test_list": [
            "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
            "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
            "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 895,
        "text": "Write a python function to count number of vowels in the string.",
        "code": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ",
        "test_list": [
            "assert same_Length(12,1) == False",
            "assert same_Length(2,2) == True",
            "assert same_Length(10,20) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 740,
        "text": "Write a function to calculate the perimeter of a regular polygon.",
        "code": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "test_list": [
            "assert smallest_Divisor(10) == 2",
            "assert smallest_Divisor(25) == 5",
            "assert smallest_Divisor(31) == 31"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 845,
        "text": "Write a function to check if the given array represents min heap or not.",
        "code": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1",
        "test_list": [
            "assert validity_triangle(60,50,90)==False",
            "assert validity_triangle(45,75,60)==True",
            "assert validity_triangle(30,50,100)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 834,
        "text": "Write a python function to find the length of the shortest word.",
        "code": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item",
        "test_list": [
            "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
            "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
            "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 728,
        "text": "Write a python function to find minimum adjacent swaps required to sort binary array.",
        "code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1",
        "test_list": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
            "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
            "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 879,
        "text": "Write a function to find the number which occurs for odd number of times in the given array.",
        "code": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans",
        "test_list": [
            "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
            "assert replace_spaces('The Avengers') == 'The_Avengers'",
            "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    },
    {
        "task_id": 845,
        "text": "Write a function to find the number which occurs for odd number of times in the given array.",
        "code": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ",
        "test_list": [
            "assert text_match(\"ac\")==('Found a match!')",
            "assert text_match(\"dc\")==('Not matched!')",
            "assert text_match(\"abba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": []
    }
]